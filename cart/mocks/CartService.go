// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/megre/dto"

	merrors "github.com/megre/merrors"

	mock "github.com/stretchr/testify/mock"
)

// CartService is an autogenerated mock type for the CartService type
type CartService struct {
	mock.Mock
}

// ListCartItems provides a mock function with given fields: ctx, accountID, pageNumber
func (_m *CartService) ListCartItems(ctx context.Context, accountID string, pageNumber int) ([]dto.CartItems, *merrors.Error) {
	ret := _m.Called(ctx, accountID, pageNumber)

	var r0 []dto.CartItems
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []dto.CartItems); ok {
		r0 = rf(ctx, accountID, pageNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CartItems)
		}
	}

	var r1 *merrors.Error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) *merrors.Error); ok {
		r1 = rf(ctx, accountID, pageNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*merrors.Error)
		}
	}

	return r0, r1
}

// UpsertCartItem provides a mock function with given fields: ctx, itemId, accountID, quantity
func (_m *CartService) UpsertCartItem(ctx context.Context, itemId string, accountID string, quantity int) (dto.Cart, *merrors.Error) {
	ret := _m.Called(ctx, itemId, accountID, quantity)

	var r0 dto.Cart
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) dto.Cart); ok {
		r0 = rf(ctx, itemId, accountID, quantity)
	} else {
		r0 = ret.Get(0).(dto.Cart)
	}

	var r1 *merrors.Error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) *merrors.Error); ok {
		r1 = rf(ctx, itemId, accountID, quantity)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*merrors.Error)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewCartService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartService creates a new instance of CartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartService(t mockConstructorTestingTNewCartService) *CartService {
	mock := &CartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
