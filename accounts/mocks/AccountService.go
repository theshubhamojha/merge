// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/megre/dto"

	merrors "github.com/megre/merrors"

	mock "github.com/stretchr/testify/mock"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, request
func (_m *AccountService) CreateAccount(ctx context.Context, request dto.CreateAccountRequest) (dto.CreateAccountResponse, *merrors.Error) {
	ret := _m.Called(ctx, request)

	var r0 dto.CreateAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateAccountRequest) dto.CreateAccountResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(dto.CreateAccountResponse)
	}

	var r1 *merrors.Error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateAccountRequest) *merrors.Error); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*merrors.Error)
		}
	}

	return r0, r1
}

// LoginAccount provides a mock function with given fields: ctx, loginRequest
func (_m *AccountService) LoginAccount(ctx context.Context, loginRequest dto.LoginRequest) (dto.LoginResponse, *merrors.Error) {
	ret := _m.Called(ctx, loginRequest)

	var r0 dto.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) dto.LoginResponse); ok {
		r0 = rf(ctx, loginRequest)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	var r1 *merrors.Error
	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginRequest) *merrors.Error); ok {
		r1 = rf(ctx, loginRequest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*merrors.Error)
		}
	}

	return r0, r1
}

// SuspendAccount provides a mock function with given fields: ctx, accountId
func (_m *AccountService) SuspendAccount(ctx context.Context, accountId string) *merrors.Error {
	ret := _m.Called(ctx, accountId)

	var r0 *merrors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) *merrors.Error); ok {
		r0 = rf(ctx, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*merrors.Error)
		}
	}

	return r0
}

type mockConstructorTestingTNewAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountService(t mockConstructorTestingTNewAccountService) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
