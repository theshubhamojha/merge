// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/megre/dto"

	mock "github.com/stretchr/testify/mock"
)

// ItemServiceStore is an autogenerated mock type for the ItemServiceStore type
type ItemServiceStore struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, item
func (_m *ItemServiceStore) AddItem(ctx context.Context, item dto.ItemRequest) (dto.ItemResponse, error) {
	ret := _m.Called(ctx, item)

	var r0 dto.ItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ItemRequest) dto.ItemResponse); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(dto.ItemResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ItemRequest) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, itemID
func (_m *ItemServiceStore) GetItem(ctx context.Context, itemID string) (dto.ItemResponse, error) {
	ret := _m.Called(ctx, itemID)

	var r0 dto.ItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.ItemResponse); ok {
		r0 = rf(ctx, itemID)
	} else {
		r0 = ret.Get(0).(dto.ItemResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewItemServiceStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemServiceStore creates a new instance of ItemServiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemServiceStore(t mockConstructorTestingTNewItemServiceStore) *ItemServiceStore {
	mock := &ItemServiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
